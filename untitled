
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<style>
			body {
				margin: 0px;
				background-color: #000000;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script src="../build/three.min.js"></script>
		<script src="http://js.leapmotion.com/0.2.0/leap.min.js"></script>

		<script>

			// Store frame for motion functions
			var previousFrame = null;
			var paused = false;
			var pauseOnGesture = false;

			// Setup Leap loop with frame callback function
			var controllerOptions = {enableGestures: true};

			var camera, scene, renderer;
			var mesh;

			init();
			animate();

			function init() {

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = 400;

				scene = new THREE.Scene();

				var geometry = new THREE.CubeGeometry( 200, 200, 200 );

				var texture = THREE.ImageUtils.loadTexture( 'textures/crate.gif' );
				texture.anisotropy = renderer.getMaxAnisotropy();

				var material = new THREE.MeshBasicMaterial( { map: texture } );

				mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				var previousNormalX = 0;
				var currentNormalX = 0;

				var previousNormalY = 0;
				var currentNormalY = 0;

				var previousNormalZ = 0;
				var currentNormalZ = 0;

				Leap.loop(controllerOptions, function(frame) 
				{

				    if (frame.hands.length > 0) 
				    {

    					for (var i = 0; i < frame.hands.length; i++) 
    					{
      						var hand = frame.hands[i];

				  			// Hand motion factors
						      if (previousFrame && previousFrame.valid) 
						      {
						        var translation = hand.translation(previousFrame);

						        var rotationAxis = hand.rotationAxis(previousFrame, 2);
						        var rotationAngle = hand.rotationAngle(previousFrame);
						        var scaleFactor = hand.scaleFactor(previousFrame);

						        currentNormalX = hand.palmNormal[2];
						        currentNormalY = hand.palmNormal[1];
						        currentNormalZ = hand.palmNormal[0];

						        var normalDiffX = currentNormalX - previousNormalX;
						        var normalDiffY = currentNormalY - previousNormalY;
						        var normalDiffZ = currentNormalZ - previousNormalZ;

						        mesh.rotation.x += rotationAngle*rotationAxis[2]//normalDiffX*-2;
						        //mesh.rotation.y += normalDiffY*0.5;
						        //mesh.rotation.z += normalDiffZ*2;

						      }
						 }
					}

					renderer.render( scene, camera );
					previousFrame = frame;

					previousNormalX = currentNormalX;
					previousNormalY = currentNormalY;
					previousNormalZ = currentNormalZ;
				})

			}

		</script>
	</body>
</html>
